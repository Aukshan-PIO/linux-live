#!/bin/bash
# Linux Live Kit version 7

export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

CHANGEDIR=$(dirname $(readlink -f $0))
echo "Changing current directory to $CHANGEDIR"
CWD="$(pwd)"
cd $CHANGEDIR

. ./config || exit 1
. ./livekitlib || exit 1

# only root can continue, because only root can read all files from your system
allow_only_root

# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   echo "mksquashfs not found or doesn't support -comp xz, aborting, no changes made"
   echo "you may consider installing squashfs-tools package"
   exit 1
fi

MKISOFS=$(which mkisofs)
if [ "$MKISOFS" = "" ]; then
   MKISOFS=$(which genisoimage)
fi
if [ "$MKISOFS" = "" ]; then
   echo "Cannot found mkisofs or genisoimage, stop"
   exit 3
fi

# build initramfs image
if [ "$SKIPINITRFS" = "" ]; then
   echo "Building intramfs image..."
   cd initramfs
   INITRAMFS=$(./initramfs_create)
   cd ..
fi

# create live kit filesystem (cpio archive)
rm -Rf "$LIVEKITDATA"
BOOT="$LIVEKITDATA"/"$LIVEKITNAME"/boot
mkdir -p "$BOOT"
mkdir -p "$BOOT"/../changes
mkdir -p "$BOOT"/../modules

if [ "$INITRAMFS" != "" ]; then
   mv "$INITRAMFS" $BOOT/initrfs.img
fi

# BIOS / MBR booting
cp -r bootfiles/* $BOOT
cp -r boot $LIVEKITDATA
cat bootfiles/syslinux.cfg | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" > $BOOT/syslinux.cfg
cat bootfiles/bootinst.bat | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" | sed -r "s:\\\\boot\\\\:\\\\$LIVEKITNAME\\\\boot\\\\:" > $BOOT/bootinst.bat
cp $VMLINUZ $BOOT/ || exit

# create compressed 01-core.sb
COREFS=""
for i in $MKMOD; do
   if [ -d /$i ]; then
      COREFS="$COREFS /$i"
   fi
done
mksquashfs $COREFS $LIVEKITDATA/$LIVEKITNAME/01-core.$BEXT -comp xz -b 1024K -always-use-fragments -keep-as-directory || exit

cd "$LIVEKITDATA"
ARCH=$(uname -m)
TARGET=/tmp

cat "$CWD/bootinfo.txt" | fgrep -v "#" | sed -r "s/mylinux/$LIVEKITNAME/" | sed -r "s/\$/\x0D/" > readme.txt

echo "---Creating ISO---"
cd $LIVEKITDATA 
ISO_Name=microVM-01.iso
xorriso -as mkisofs  -v -J -R -D -A linux -V linux -no-emul-boot \
                    -boot-info-table -boot-load-size 4 -b linux/boot/isolinux.bin -c linux/boot/isolinux.boot -l \
		    -isohybrid-mbr linux/boot/mbr.bin -no-emul-boot -boot-load-size 4 -boot-info-table \
                    -eltorito-alt-boot \
                    -e boot/grub/efi.img \
                    -no-emul-boot -isohybrid-gpt-basdat \
		    -o /tmp/$ISO_Name .

echo "-----------------------------"
echo "Finished. Find your result in /tmp/$ISO_Name"
cd $CWD
